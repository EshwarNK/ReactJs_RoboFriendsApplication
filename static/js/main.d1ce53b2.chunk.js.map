{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filterRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCUSC,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCDGS,EAlBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OAClB,OACER,EAAAC,EAAAC,cAAA,eACAM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACCX,EAAAC,EAAAC,cAACU,EAAD,CACAC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAQW,EAAOG,GAAGd,KAClBC,MAAOU,EAAOG,GAAGb,YCGPgB,EAZG,SAAAlB,GAAiCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aAChC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACjBH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCACI,SARA,SAACC,GACd,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,YC2FEC,cAvEd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgCDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAhCzCX,EAAKY,MAAQ,CAEZhC,OAAQ,GACRO,YAAa,IALFa,mFAeO,IAAAa,EAAAV,KAEjBW,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAUL,EAAKJ,SAAS,CAAE7B,OAAQsC,uCAkBrC,IAAAC,EAAAhB,KACDiB,EAAejB,KAAKS,MAAMhC,OAAOyC,OAAO,SAAAC,GAC7C,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASL,EAAKP,MAAMzB,YAAYoC,iBAEjE,OAA8B,IAA3BpB,KAAKS,MAAMhC,OAAO6C,OACbrD,EAAAC,EAAAC,cAAA,qBAIRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAgBe,KAAKI,iBAChCnC,EAAAC,EAAAC,cAACqD,EAAD,KACCvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,aAnDHS,aCZlBC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SNuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,KAAK,SAAAuB,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.d1ce53b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// const Card = (props) => {\n// \tconst {name, email} = props;\n// \treturn (\n// \t\t// This is all JSX  robots.js\n// \t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t<img src={'https://robohash.org/${props.id}?200x200'} alt='robots'/>\n// \t\t\t<div >\n// \t\t\t\t<h2>{props.name}</h2>\n// \t\t\t\t<p>{props.email}</p>\n// \t\t\t</div> \n// \t\t</div>\n// \t\t);\n// }\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t <div> {\n\t\t\trobots.map((user, i) => {\n\t\t\t\treturn \t(\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname = {robots[i].name} \n\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t})\t\n\t\t}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\n// searchChange acts as an html event\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t<input \n\t\tclassName='pa3 ba b--green bg-lightest-blue' \n\t\ttype='search' \n\t\tplaceholder='Search Robots' \n\t\tonChange = {searchChange} />\n\t\t</div>\n\t\t);\n}\n//pa2 is from tachyons\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n\n// Components: They are the components of our application\n// Containers: They are the one that have state in them","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport {robots} from '../robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll'; \n// React has something called STATE, with the help of which of which we can estabilish communication between 2 components\n// Here the search bar has to communicate with the card list\n// For this we use STATE in react\n// We have to store the STATE somewhere, to interact with the robots\n// So we create a state object and convert out App from const to a class\n\n// const state = {\n// \trobots: robots,\n// \tsearchfield: ''\n// }\n\n// Step1: In searchbox.js whenever something in the search box changes, then onChange event will\n// trigger.\n// Step2: The triggers searchChange in the app.js file. \n// Step3: The change is communicated with the robots object through the filterRobots to make \n// the needed robots only to appear in the screen \n// Everytime when there is a change, the render will be triggered\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t// robots: robots,\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t\t// console.log('constructor');\n\t}\n\n\t// componentDidMount(){\n\t// \tthis.setState({robots: robots});\n\t// \tconsole.log('componentDidMount');\n\t// }\n\n\tcomponentDidMount() {\n\t\t// We are taken input from jsonplaceholder instead of robots.js and adding it as robots\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n\t// onSearchChange = (event) => {\n\t// \t// Here the even refers to the input event that is triggered in the searchBox.js\n\t// \t// It does not refer to the app.js\n\t// \tthis.setState({searchfield: event.target.value});\n\t// \tconsole.log(event.target.value);\n\t// \tconst filterRobots = this.state.robots.filter(robots => {\n\t// \t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t// \t}) \n\t// \tconsole.log(filterRobots);\n\t// }\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\n\trender(){\n\t\tconst filterRobots = this.state.robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\tif(this.state.robots.length===0){\n\t\t\treturn <h1>Loading</h1>\n\t\t}else{\n\t\t// console.log('render');\n\t\treturn (\n\t\t<div className='tc'>\n\t\t<h1>RoboFriends</h1>\n\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t<Scroll>\n\t\t\t<CardList robots={filterRobots}/>\n\t\t</Scroll>\n\t\t</div>\n\t\t); \n\t\t}\n\t}\n}\n\n// Here we are using CardList as a children of parent scroll\n// Here we are wrapping custom component cardlist inside scroll\n\n// const App = () => {\n// \treturn (\n// \t\t<div className='tc'>\n// \t\t<h1>RoboFriends</h1>\n// \t\t<SearchBox />\n// \t\t<CardList robots={robots}/>\n// \t\t</div>\n// \t\t);\n// }\n\nexport default App;","import React from 'react';\t// React is the core that contains the react bot\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; \nimport App from './containers/App';\nimport CardList from './components/CardList';\nimport Card from './components/Card';\nimport {robots} from './robots';\n// Since robots is not available by default, we have to destructure it\n// Service worker helps the app to run when the app is offline\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// When there are 100 cards, you cant add card everytime, so we create a cardlist component which is a parent of \n// Card. \n/*\n// ReactDOM.render(<Hello greeting={'Hello'+'React Ninja'}/>, document.getElementById('root'));\n\n// ReactDOM.render(\n//   <h1>Helloworld</h1>,\n//   document.getElementById('root')\n// );\n*/\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// LIfecyle methods react\n// React provides few inbuilt methods that performs few actions like, add, remove, update, etc. \n// https://reactjs.org/docs/react-component.html\n\n// Components: They are the components of our application. Cardlist, searchBox, scroll\n// Containers: They are the one that have state in them. They pass state to components. \n\n// Finally, when you run \"npm run build\"\n// It creates a build folder, that contains all the files in manifest format and is portable\n// This build folder can be deployed anywhere"],"sourceRoot":""}